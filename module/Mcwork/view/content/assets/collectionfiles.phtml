<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
// set table tag attributes
$tableFactory->setAttributes('class', 'mcworkBackendTable table display');
$i = 0;
$iClass = 0;
$headlines = array(
    '#' => array(),
    'File' => array(),
    'Date' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    ),
    'Edit' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    )
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;
$dir = '';
foreach ($this->entries as $entry) {
    if ('.' != $entry->filename && '..' != $entry->filename && ! in_array($entry->filename, array()) && 'file' == $entry->type) {
        $i++;
        $rowContent = array();
        $rowContent[] = '<input id="row' . $i .'" type="checkbox" data-name="' . $entry->filename . '" value="' . $entry->filename . '" name="cb[]" data-type="file">';
        $rowContent[] = '<i class="fa fa-file"></i> ' . $entry->filename;
        $rowContent[] = date("d.m.Y H:i:s", $entry->time);
        $props = array(
            'edit' => array(
                'href' => '/mcwork/' . $this->paramter['section'] . '/write/' . $entry->filename,
                'attribs' => array(
                    'title' => 'Edit item',
                    'class' => 'button tiny'
                )
            ),            
            'copy' => array(
                'attribs' => array(
                    'class' => 'tiny button copycollectionfile',
                    'data-ident' =>  $entry->filename,
                    'data-type' => 'file',
                    'data-current' => 'collections',
                    'data-service' => 'backend_client_app',
                    'data-appkey' => 'copycollectionfile',
                    'title' => 'Copy and rename file'
                )
            ),
            'delete' => array(
                'href' => '/mcwork/' . $this->paramter['section'] . '/delete',
                'attribs' => array(
                    'data-ident' => 'row' . $i,
                    'data-current' => $dir,
                    'data-url' => '/mcwork/' . $this->paramter['section'] . '/delete',
                    'title' => 'Delete file',
                    'class' => 'button tiny alert rmitem'
                )
            ),
        );
        
        if ('default.php' === $entry->filename){
            unset($props['delete'],$props['edit']);
        }
        
        $rowContent[] = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
        $tableFactory->setHtmlContent($rowContent);        
    }
}

$links = array(
    'add' => array(
        'href' => '/mcwork/' . $this->paramter['section'] . '/add'
    ),
    'edit' => array(
        'href' => '/mcwork/' . $this->paramter['section'] . '/edit'
    ),
    'delete' => array(
        'attribs' => array(
            'data-current' => $dir,
            'data-url' => '/mcwork/' . $this->paramter['section'] . '/delete',
        ),
    )
);

print '<div class="row toprow"><div class="medium-6 columns"><h2>' . $this->content['headline'] . '</h2>';
print '</div><div class="medium-6 columns">'. $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
print '</div></div>';
print '<div class="row"><div class="medium-12 columns">';
print $tableFactory->display();
if (isset($this->content['content']) && strlen($this->content['content']) > 1) {
    echo $this->content['content'];
}
print '</div></div>';
?>