<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
// set table tag attributes
$tableFactory->setAttributes('class', 'table tblNoSort display compact');
$tableFactory->setAttributes('id', 'mcworkTables');
$i = 0;
$iClass = 0;
$headlines = array(
    '#' => array(),
    'Contribution' => array(),
    'Sequence' => array(),
    'Rang' => array(
        'head' => array(
            'class' => 'text-center'
        ),
        'body' => array(
            'class' => 'text-center'
        )    
    )
)
;
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;

$defaults = $this->toolbarcontent->toArray();
$defaults['attribute']['class'] = 'button-group left';

$rangSelect = count($this->entries);

foreach ($this->entries as $entry) {
    if (true === $this->listIsAllowed($entry, $this->identity)){
    $i ++;
    $tbl = array(
        'up' => array(
            'attribs' => array(
                'data-group' => $entry->webContentgroup,
                'data-category' => $entry->id,
                'data-groupname' => 'webContentgroup',
                'data-categoryname' => 'id',
                'data-rang' => $entry->itemRang,                
                'data-entity' => 'entity_content_groups',
                'data-move' => 'moveup',
                'class' => 'button tiny moveitem'
            )
        ),
        'down' => array(
            'attribs' => array(
                'data-group' => $entry->webContentgroup,
                'data-category' => $entry->id,
                'data-groupname' => 'webContentgroup',
                'data-categoryname' => 'id',
                'data-rang' => $entry->itemRang,                
                'data-entity' => 'entity_content_groups',
                'data-move' => 'movedown',
                'class' => 'button tiny moveitem'
            )
        ),
    );
    if (1 == $i){
        unset($tbl['up']);
    }
    if ($i == $rangSelect){
        unset($tbl['down']);
    }    
    //$page = $entry->webPages->label;
    $rowContent = array();
    $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->id . '" name="cb[]">';
    $rowContent[] = $entry->webContent->title;
    $rowContent[] = $this->mcworkToolbar($tbl, true, $defaults);
    $rowContent[] = $this->mcworkSelectRang($entry->webContentgroup,'webContentgroup',$entry->id,'id',$entry->itemRang, $rangSelect, 'entity_content_groups');
    $tableFactory->setHtmlContent($rowContent);
    }
}
if (true === $this->xmlHttpRequest){
    print $tableFactory->display();
    exit();
}
$toolbar = '';
if (isset($this->toolbarcontent)) {
    $links = array(
        'back' => array(
            'href' => '/mcwork/pagecontent'
        ),
    );
    $toolbar = $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
}
print '<div class="row toprow"><div class="medium-6 columns"><h2>' . $this->content['headline'] . '</h2>';
print '</div><div class="medium-6 columns">'. $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
print '</div></div>';
print $this->mcworkAlert($this->messages, $this->msgtype);
print '<div class="row"><div id="addTblContent" class="medium-12 columns">';
print $tableFactory->display();
if (isset($this->content['content']) && strlen($this->content['content']) > 1) {
    echo $this->content['content'];
}
print '</div></div>';
?>