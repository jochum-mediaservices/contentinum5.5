<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
// set table tag attributes
$tableFactory->setAttributes('class', 'mcworkBackendTable table display');
$i = 0;
$iClass = 0;
$headlines = array(
    '#' => array(),
    'File' => array(),
    'Date' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    ),
    'Edit' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    )
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);

$dbMediaInUse = array();
if ($this->services && isset($this->services['inusemedias'])) {
    $dbMediaInUse = $this->services['inusemedias'];
}

$dbMediaTable = array();
if ($this->services && isset($this->services['medias'])) {
    $dbMediaTable = $this->services['medias'];
}
$dbAssignTagsTable = array();
if ($this->services && isset($this->services['assigntags'])) {
    $dbAssignTagsTable = $this->services['assigntags'];
}

$upDate = $registerDate = $owner = $updater = '';
$i = 0;
if (strlen($this->paramter['article']) > 1){
    $dir = $this->paramter['article'] . '_';
    
    
    $up = '';
    $array = explode('_', $this->paramter['article']);
    if (null != array_pop($array)) {
        $up = implode('_', $array);
        if (strlen($up) > 0){
            $up = '/' . $up;
        }
    } 
    
    
    
    $i ++;
    $rowContent = array();
    $rowContent[] = '#';
    $rowContent[] = '<a href="/mcwork/' . $this->paramter['section'] . $up . '" class="tiny button"><i class="fa fa-arrow-up"></i></a>';
    $rowContent[] = '&nbsp;';
    $rowContent[] = '&nbsp;';
    $tableFactory->setHtmlContent($rowContent);    
    
    
} else {
    $dir = '';
}

foreach ($this->entries as $entry) {
    if ('.' != $entry->filename && '..' != $entry->filename && ! in_array($entry->filename, array('templates')) && 'dir' == $entry->type) {
        $dataAttribInUse = '';
        $delete = true;
        $type = 'dir';
        if (true == $entry->childs ){
            $dataAttribChilds = ' data-childs="yes"';
            $icon = '<i class="fa fa-folder-open"></i>';
            $delete = false;
        } else {
            $dataAttribChilds = ' data-childs="no"';
            $icon = '<i class="fa fa-folder"></i>';
        } 
        $label = '';
        if ($entry->counts['all'] > 0){
            $delete = false;
            $label = '<span class="label info">'.$entry->counts['all'].' Elemente</span>';
        }
        if (false === $delete){
            $type = 'close';
        }
        $i ++;
        $rowContent = array();      
        $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->filename . '" name="cb[]" data-type="'.$type.'" data-name="' . $entry->filename . '" />';
        $rowContent[] = '<a href="/mcwork/' . $this->paramter['section'] .'/'.$dir.$entry->filename.'">'.$icon.' ' . $entry->filename . '</a> ' . $label ;
        $rowContent[] = date("d.m.Y H:i:s", $entry->time);
        
        $props = array(
            'delete' => array(
                'href' => '/mcwork/' . $this->paramter['section'] . '/rmdir',
                'attribs' => array(
                    'data-row' => 'row' . $i,
                    'data-current' => $dir,
                    'title' => 'Delete item',
                    'class' => 'button tiny alert rmdir'
                )
            ),            
        );
        
        if (false === $delete){
            $rowContent[] = '&nbsp;';
        } else {
            $rowContent[] = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
        }
        $tableFactory->setHtmlContent($rowContent);
    }
}
foreach ($this->entries as $entry) {
    if ('.' != $entry->filename && '..' != $entry->filename && ! in_array($entry->filename, array('README.md','index.html')) && false === strpos($entry->filename, '-200-th') && 'file' == $entry->type) {
        $pathname = \ContentinumComponents\Path\Clean::get($entry->pathname);
        $pathname = str_replace($entry->docroot, '', $pathname);
        $label = '';
        $inUse = false;
        $thisItem = array();
        if (isset($dbMediaTable[$pathname])) {
            $thisItem = $dbMediaTable[$pathname];
        }
        $itemIdent = 0;
        if ( isset($thisItem['id']) && isset($dbMediaInUse[$thisItem['id']]) ) {
            $label = '<span class="label alert">In use</span>';
            $inUse = true;
            $itemIdent = $thisItem['id'];
        }        
        switch ($entry->mimetype) {
            case 'application/zip':
                $icon = '<i class="fa fa-archive"></i> ';
                break;
            case 'application/pdfxx':
                $icon = '<i class="fa fa-pdf-o"></i> ';
                break;
            case 'image/jpeg':
                $icon = '<i class="fa fa-picture-o"></i> ';
                break;
            default:
                $icon = '<i class="fa fa-file"></i> ';
        } 
        $px = '';
        $px .= ($entry->width) ? ', ' . $entry->width . 'px x ' : '';
        $px .= ($entry->height) ? $entry->height . 'px' : '';
        
        $i++;
        $rowContent = array();
        $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->filename . '" name="cb[]" data-type="file" data-name="' . $entry->filename . '" data-ident="'.$thisItem['id'].'" />';
        $rowContent[] = $icon . $entry->filename . ' <span class="label info">' . $this->filesize($entry->size) . $px . '</span>' . $label; // . ' id:' . $thisItem['id'];
        $rowContent[] = date("d.m.Y H:i:s", $entry->time);
        
        if ( preg_match('/image\//', $entry->mimetype)  ){
            $editApp = 'imageattribute';
            $resizeapp = 'imageresize';
        } else {
            $editApp = 'fileattribute';
            $resizeapp = false;
        }
        $tags = ' ';
        
        $mediaName = false;
        if (isset($thisItem['mediaName'])){
            $mediaName = $thisItem['mediaName'];
        }
        $upDate = $registerDate = $owner = $updater = '';
        if (isset($thisItem['upDate']) && isset($thisItem['registerDate'])){
            $upDate = $thisItem['upDate']->format('d F Y, H:i:s');
            $registerDate = $thisItem['registerDate']->format('d F Y, H:i:s');
            $owner = $thisItem['createdBy'];
            $updater = $thisItem['updateBy'];
        } 
        $props = array(
            'copy' => array(
                'attribs' => array(
                    'class' => 'tiny button copypublicfile',
                    'data-ident' =>  $entry->filename,
                    'data-type' => 'file',
                    'data-current' => $dir,
                    'data-service' => 'backend_client_app',
                    'data-appkey' => 'copypublicfile',
                    'title' => 'Copy and rename file'
                )
            ),
            'edit' => array(
                'href' => '/mcwork/' . $this->paramter['section'] . '/edit/' . $thisItem['id'],
                'attribs' => array(
                    'data-service' => 'backend_client_app',
                    'data-appkey' => $editApp,
                    'data-ident' => $thisItem['id'],
                    'title' => 'Edit item',
                    'class' => 'button tiny editapp'
                )
            ),   
            'download' => array(
                'href' => '/mcwork/' . $this->paramter['section'] . '/download/' . $thisItem['id'],
                'attribs' => array(
                    'data-name' => $entry->filename,
                    'data-ident' => 'row' . $i,
                    'title' => 'Download this file',
                    'class' => 'button tiny'
                )
            ),            
            'delete' => array(
                'href' => '/mcwork/' . $this->paramter['section'] . '/delete',
                'attribs' => array(
                    'data-ident' => 'row' . $i,
                    'data-name' => $entry->filename,
                    'data-type' => 'file',
                    'data-current' => $dir,
                    'title' => 'Delete item',
                    'class' => 'button tiny alert rmitem'
                )
            ),
            'info' => array(
                'attribs' => array(
                    'data-service' => 'backend_client_app',
                    'data-appkey' => 'infoapp',
                    'data-ident' => $thisItem['id'],
                    'data-entity' => 'entity_media_table',                    
                    'data-upDate' => $upDate,
                    'data-registerDate' => $registerDate,
                    'data-createBy' => $owner,
                    'data-updateBy' => $updater,
                    'data-username' => $this->identity->name,
                    'data-role' => $this->role,
                    'title' => 'Item properties',
                    'class' => 'button tiny infotip'
                )
            )            
        );
        if (true === $inUse){
            unset($props['delete']);
        }
        $rowContent[] = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
        $tableFactory->setHtmlContent($rowContent);        
    }
}
$links = array(
    'add' => array(
        'label' => 'Upload',
        'href' => '#',
        'attribs' => array(
            'id' => 'btnUpload',
            'data-service' => 'backend_client_app',
            'data-appkey' => 'dropzoneupload'
        )
    ),    
    'delete' => array(
        'href' => '/mcwork/' . $this->paramter['section'] . '/delete',
        'label' => '<i class="fa fa-trash-o"></i> ' . $this->translate('Files'),
        'attribs' => array(
            'data-current' => $dir,
            'id' => 'btnTblrm',
            
        ),
    )
);
if (true === $this->xmlHttpRequest){
    print $tableFactory->display();
    exit();
}
$category = $dir;
print '<div class="row toprow"><div class="medium-6 columns"><h2>' . $this->translate($this->content['headline']) . '</h2>';
print '</div><div class="medium-6 columns">'. $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
print '</div></div>';
print $this->mcworkAlert($this->messages, $this->msgtype);
print '<div class="row"><div class="medium-12 columns">';
print '<form id="mkDirForm" action="/mcwork/files/makedir" method="POST">';
print '<div id="clNewFolder" class="row collapse">';
print '<div class="small-9 columns">';
print '<input id="new-folder" placeholder="'. $this->translate('Add a foldername here') . '" name="new-folder" type="text"><span class="errNewFolder"> </span>';
print '</div>';
print '<div class="small-3 columns">';
print '<a id="btnNewFolder" href="#" class="button postfix">'. $this->translate('Add Folder') . '</a>';
print '</div></div>';
print '<input name="currentpath" id="currentpath" data-currentpath="'.$category.'" type="hidden" value="'.$category.'" />';
print '</form>';
print '</div></div>';
print '<div class="row"><div id="addTblContent" class="medium-12 columns">';
print $tableFactory->display();
if (isset($this->content['content']) && strlen($this->content['content']) > 1) {
    echo $this->content['content'];
}
print '</div></div>';
?>