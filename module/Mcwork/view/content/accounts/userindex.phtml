<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;

function setLastLogin($lastLogin){
    $datetime = new \DateTime($lastLogin);
    return $datetime->format("d.m.Y, H:i:s") . ' Uhr';
}
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
// set table tag attributes
$tableFactory->setAttributes('class', 'table tblNoSort display compact');
$tableFactory->setAttributes('id', 'mcworkTables');
$i = 0;
$iClass = 0;
$headlines = array(
    '#' => array(),
    'Username' => array(),
    'Role' => array(),
    'Status' => array(
        'head' => array(
            'class' => 'text-center'
        ),
        'body' => array(
            'class' => 'text-center'
        )        
    ),    
    'Verify' => array(
        'head' => array(
            'class' => 'text-center'
        ),
        'body' => array(
            'class' => 'text-center'
        )        
    ),
    'Anzahl Logins' => array(
        'head' => array(
            'class' => 'text-center'
        ),
        'body' => array(
            'class' => 'text-center'
        )    
    ),    
    'Last Login' => array(),
    'Edit' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    )
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;
foreach ($this->entries as $entry) {
    if ('admin' == $this->role || $this->identity->userid == $entry->id){
        $i ++;
        $rowContent = array();
        $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->id . '" name="cb[]" data-name="' .  $entry->username . '" />';
        $rowContent[] = $entry->username . '<br /><em>' . $entry->contacts->firstName . ' '. $entry->contacts->lastName . '</em>';
        $rowContent[] = $entry->userRoles->name;
        if ('admin' == $this->role ) {
            if ($entry->tryLogin >= 3){
                $rowContent[] = '<a class="has-tip usrblocked" href="#" data-tooltip role="tooltip" aria-haspopup="true" data-ident="'.$entry->id.'" title="Benutzer ist aufgrund von '.$entry->tryLogin.' fehlerhaften Loginversuchen gesperrt, kein Login m&ouml;glich"><i class="fa fa-lock fa-2x alizarin-color"> </i></a>';
            } else {
                $rowContent[] = '<i class="fa fa-unlock fa-2x emerald-color"></i>';
            }            
            $rowContent[] = $this->mcworkPublishItem($entry->publish,$entry->id,'entity_user');
        } else {
            $rowContent[] = '<i class="fa fa-lock fa-2x emerald-color"> </i>';
            $rowContent[] = '<i class="fa fa-lock fa-2x emerald-color"> </i>';
        }
        $rowContent[] = $entry->countLogin;
        $rowContent[] = ('0000-00-00 00:00:00' == $entry->lastLogin) ? $this->translate('Never Login') : setLastLogin($entry->lastLogin);
        if ('admin' == $this->role ) {
            $props = array(
                'edit' => array(
                    'href' => '/mcwork/' . $this->paramter['section'] . '/edit/' . $entry->id,
                    'attribs' => array(
                        'title' => 'Edit item',
                        'class' => 'button tiny'
                    )
                ),
                'delete' => array(
                    'href' => '/mcwork/' . $this->paramter['section'] . '/delete/' . $entry->id,
                    'attribs' => array(
                        'data-name' => $entry->username,
                        'data-ident' => 'row' . $i,
                        'title' => 'Delete item',
                        'class' => 'button tiny alert deleteitem'
                    )
                ),
                'info' => array(
                    'attribs' => array(
                            'data-service' => 'backend_client_app',
                            'data-appkey' => 'infoapp',
                            'data-entity' => 'entity_user',
                            'data-ident' => $entry->id,                
                            'data-upDate' => $entry->upDate->format('d F Y, H:i:s'),
                            'data-registerDate' => $entry->registerDate->format('d F Y, H:i:s'),
                            'data-createBy' => $entry->createdBy,
                            'data-updateBy' => $entry->updateBy,
                            'data-username' => $this->identity->name,
                            'data-role' => $this->role,
                            'title' => 'Item properties',
                            'class' => 'button tiny infotip'
                    )
                )
            ); 
        } else {
            $props = array(
                'edit' => array(
                    'href' => '/mcwork/' . $this->paramter['section'] . '/usredit/' . $entry->id,
                    'attribs' => array(
                        'title' => 'Edit item',
                        'class' => 'button tiny'
                    )
                ),
            );            
        }
        
        $rowContent[] = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
        $tableFactory->setHtmlContent($rowContent);
    }
}
if (true === $this->xmlHttpRequest){
    print $tableFactory->display();
    exit();
}
$toolbar = '';
if (isset($this->toolbarcontent)) {
    $links = array(
        'add' => array(
            'href' => '/mcwork/' . $this->paramter['section'] . '/add'
        ),
        'edit' => array(
            'href' => '/mcwork/' . $this->paramter['section'] . '/edit'
        ),
        'delete' => array(
            'href' => '/mcwork/' . $this->paramter['section'] . '/delete'
        )
    );
    $toolbar = $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
}
print '<div class="row toprow"><div class="medium-6 columns"><h2>' . $this->translate($this->content['headline']) . '</h2>';
print '</div><div class="medium-6 columns">'. $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
print '</div></div>';
print $this->mcworkAlert($this->messages, $this->msgtype);
print '<div class="row"><div id="addTblContent" class="medium-12 columns">';
print $tableFactory->display();
if (isset($this->content['content']) && strlen($this->content['content']) > 1) {
    echo $this->content['content'];
}
print '</div></div>';
?>