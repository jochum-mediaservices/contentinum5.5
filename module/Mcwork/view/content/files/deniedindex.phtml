<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
// set table tag attributes
$tableFactory->setAttributes('class', 'table tblNoSort display compact');
$tableFactory->setAttributes('id', 'mcworkTables');
$i = 0;
$iClass = 0;
$headlines = array(
    '#' => array(),
    'File' => array(),
    'Category' => array(),
    'Size' => array(
        'head' => array(
            'class' => 'hide-for-small text-center'
        ),
        'body' => array(
            'class' => 'hide-for-small text-center'
        )    
    
    ),
    'Date' => array(
        'head' => array(
            'class' => 'hide-for-small text-center'
        ),
        'body' => array(
            'class' => 'hide-for-small text-center'
        )    
    ),
    'Edit' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    )
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}

$dbMediaTable = array();
if ($this->services && isset($this->services['medias'])) {
    $dbMediaTable = $this->services['medias'];
}
$dbAssignTagsTable = array();
if ($this->services && isset($this->services['assigntags'])) {
    $dbAssignTagsTable = $this->services['assigntags'];
    //var_dump($dbAssignTagsTable);exit; 
}

$tableFactory->setHeadline($columns);
$i = 0;
foreach ($this->entries as $entry) {
   
    if ('.' != $entry->filename && '..' != $entry->filename && 'file' == $entry->type && 'index.html' != $entry->filename) {
        
        $pathname = \ContentinumComponents\Path\Clean::get($entry->pathname);
        $pathname = str_replace($entry->docroot, '', $pathname);
        
        if (isset($dbMediaTable[$pathname])) {
            $thisItem = $dbMediaTable[$pathname];
            $tagKey = '';
            if ( isset($dbAssignTagsTable[$thisItem['id']]) ){
                $tags = implode(',', $dbAssignTagsTable[$thisItem['id']] );
                foreach ($dbAssignTagsTable[$thisItem['id']] as $itemTag){
                    $tagKey .= '<span class="label">' . $itemTag . '</span>';
                }
            } else {
                $tags = ' ';
                $tagKey = '';
            }            
            
            switch ($entry->mimetype) {
                case 'application/zip':
                    $icon = '<i class="fa fa-archive"></i> ';
                    break;
                case 'application/pdf':
                    $icon = '<i class="fa fa-pdf-o"></i> ';
                    break;
                case 'application/msexcel':
                    $icon = '<i class="fa fa-file-excel-o"></i>';
                    break;                    
                case 'image/jpeg':
                    $icon = '<i class="fa fa-picture-o"></i> ';
                    break;
                default:
                    $icon = '<i class="fa fa-file"></i> ';
            }
            
            $i ++;
            $rowContent = array();
            $rowContent[] = '<input id="row' . $i . '" type="checkbox" value="' . $entry->filename . '" name="cb[]" data-type="file" data-name="' . $entry->filename . '" data-ident="'.$thisItem['id'].'" />';
            $rowContent[] = $icon . $entry->filename;
            $rowContent[] = '<span id="cat'.$thisItem['id'].'" class="filetags">' . $tagKey . '</span>';
            $filesize = $this->filesize($entry->size);
            $rowContent[] = $filesize;
            $rowContent[] = date("d.m.Y H:i:s", $entry->time);

            if ( preg_match('/image\//', $thisItem['mediaType'])  ){
                $editApp = 'imageattribute';
            } else {
                $editApp = 'fileattribute';
            }
            
            $props = array(
                'tags' => array(
                    'attribs' => array(
                        'data-tags' => $tags,
                        'data-ident' => $thisItem['id'],
                        'data-group' => 'filesdenied',
                        'data-filename' => $thisItem['mediaName'],
                        'class' => 'button tiny filetags'
                    )
                ),                
                'edit' => array(
                    'href' => '/mcwork/' . $this->paramter['section'] . '/edit/' . $thisItem['id'],
                    'attribs' => array(
                        'data-service' => 'backend_client_app',
                        'data-appkey' => $editApp,
                        'data-ident' => $thisItem['id'],
                        'title' => 'Edit item',
                        'class' => 'button tiny editapp'
                    )
                ),
                'download' => array(
                    'href' => '/mcwork/' . $this->paramter['section'] . '/download/' . $thisItem['id'],
                    'attribs' => array(
                        'data-name' => $entry->filename,
                        'data-ident' => 'row' . $i,
                        'title' => 'Download this file',
                        'class' => 'button tiny'
                    )
                ),                
                'delete' => array(
                    'href' => '/mcwork/' . $this->paramter['section'] . '/delete',
                    'attribs' => array(
                        'data-name' => $entry->filename,
                        'data-ident' => 'row' . $i,
                        'title' => 'Delete item',
                        'class' => 'button tiny alert rmitem'
                    )
                ),
                'info' => array(
                    'attribs' => array(
                        'data-service' => 'backend_client_app',
                        'data-appkey' => 'infoapp',
                        'data-ident' => $thisItem['id'],
                        'data-entity' => 'entity_media_table',                         
                        'data-upDate' => $thisItem['upDate']->format('d F Y, H:i:s'),
                        'data-registerDate' => $thisItem['registerDate']->format('d F Y, H:i:s'),
                        'data-createBy' => $thisItem['createdBy'],
                        'data-updateBy' => $thisItem['updateBy'],
                        'data-username' => $this->identity->name,
                        'data-role' => $this->role,
                        'title' => 'Item properties',
                        'class' => 'button tiny infotip'
                    )
                )
            );
            
            $rowContent[] = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );            
            $tableFactory->setHtmlContent($rowContent);
        }
    }
}
if (true === $this->xmlHttpRequest){
    print $tableFactory->display();
    exit();
}
$toolbar = '';
if (isset($this->toolbarcontent)) {
    $links = array(
        'add' => array(
            'label' => 'Upload',
            'href' => '/mcwork/' . $this->paramter['section'] . '/upload',
            'attribs' => array(
                'id' => 'upload-files',
                'data-service' => 'backend_client_app',
                'data-appkey' => 'uploadnonpublicfiles'
            )
        ),
        'edit' => array(
            'href' => '/mcwork/' . $this->paramter['section'] . '/edit'
        ),
        'delete' => array(
            'href' => '/mcwork/' . $this->paramter['section'] . '/delete',
            'attribs' => array(
                'id' => 'btnTblrm',
            ),
        ),
    );
    $toolbar = $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
}
print '<div class="row toprow"><div class="medium-6 columns"><h2>' . $this->translate($this->content['headline']) . '</h2>';
print '</div><div class="medium-6 columns">'. $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
print '</div></div>';
print $this->mcworkAlert($this->messages, $this->msgtype);
print '<div class="row"><div id="addTblContent" class="medium-12 columns">';
print $tableFactory->display();
if (isset($this->content['content']) && strlen($this->content['content']) > 1) {
    echo $this->content['content'];
}
print '</div></div>';
?>