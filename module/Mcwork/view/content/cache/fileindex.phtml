<?php
/**
 * contentinum - accessibility websites
 *
 * LICENSE
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * @category contentinum backend
 * @package View
 * @author Michael Jochum, michael.jochum@jochum-mediaservices.de
 * @copyright Copyright (c) 2009-2013 jochum-mediaservices, Katja Jochum (http://www.jochum-mediaservices.de)
 * @license http://www.opensource.org/licenses/bsd-license
 * @since contentinum version 5.0
 * @link      https://github.com/Mikel1961/contentinum-components
 * @version   1.0.0
 */
use ContentinumComponents\Html\HtmlTable;
use ContentinumComponents\Html\Table\FactoryTable;
$html = '';
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());
$html .= '<dl class="tabs" data-tab>';
$html .= '<dd class="active"><a href="#frontend">Frontend</a></dd>';
$html .= '<dd><a href="#backend">Backend</a></dd>';
$html .= '<dd><a href="#configuration">Configuration</a></dd>';
$html .= '</dl>';
$html .= '<div class="tabs-content cacheContent"><div class="content active" id="frontend">'; 
// set table tag attributes
$tableFactory->setAttributes('class', 'mcworkBackendTable cacheContentTable table display');
$i = 0;
$iClass = 0;
$headlines = array(
    'Frontend' => array(),
   
    'Cache' => array(
        'head' => array(
            'class' => 'hide-for-small'
        ),
        'body' => array(
            'class' => 'hide-for-small'
        )
    ),
    'Last write access' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    ),
    'Clear' => array(
        'head' => array(
            'class' => 'text-right'
        ),
        'body' => array(
            'class' => 'text-right'
        )
    ),    
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;
foreach ($this->entries as $area => $entry) {
    if ('frontend' == $entry['groupkey']){
        if (isset($entry['metas'])) {      
            $props = array(          
                'clear' => array(
                    'label' => 'Clear',
                    'href' => '/mcwork/cache/clear/' . $area,
                    'attribs' => array(
                        'title' => 'Empty cache',
                        'class' => 'small button'
                    )
                )
            );            
            $clear = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
            $date = date("d.m.Y H:i:s", $entry['metas']['mtime']);
        } else {
            $clear = '';
            $date = '';
        }        
        $i ++;
        $rowContent = array();
        $rowContent[] = $entry['label'];
        $rowContent[] = $entry['group'];
        $rowContent[] = $date;
        $rowContent[] = $clear;
        $tableFactory->setHtmlContent($rowContent);
    }
}

$html .= $tableFactory->display();
$html .= '</div><div class="content" id="backend">';
$headlines = '';
$columns = array();
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());

// set table tag attributes
$tableFactory->setAttributes('class', 'mcworkBackendTable table display');
$i = 0;
$iClass = 0;
$headlines = array(
    'Backend' => array(),
     
    'Cache' => array(
        'head' => array(
            'class' => 'hide-for-small'
        ),
        'body' => array(
            'class' => 'hide-for-small'
        )
    ),
    'Last write access' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    ),
    'Clear' => array(
        'head' => array(
            'class' => 'text-right'
        ),
        'body' => array(
            'class' => 'text-right'
        )
    ),
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;
foreach ($this->entries as $area => $entry) {
    if ('backend' == $entry['groupkey']){
        if (isset($entry['metas'])) {
            $props = array(
                'clear' => array(
                    'label' => 'Clear',
                    'href' => '/mcwork/cache/clear/' . $area,
                    'attribs' => array(
                        'title' => 'Empty cache',
                        'class' => 'small button'
                    )
                )
            );
            $clear = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
            $date = date("d.m.Y H:i:s", $entry['metas']['mtime']);
        } else {
            $clear = '';
            $date = '';
        }
        $i ++;
        $rowContent = array();
        $rowContent[] = $entry['label'];
        $rowContent[] = $entry['group'];
        $rowContent[] = $date;
        $rowContent[] = $clear;
        $tableFactory->setHtmlContent($rowContent);
    }
}

$html .= $tableFactory->display();

$html .= '</div><div class="content" id="configuration">';
$headlines = '';
$columns = array();
// prepare content, create a table
$tableFactory = new HtmlTable(new FactoryTable());

// set table tag attributes
$tableFactory->setAttributes('class', 'mcworkBackendTable table display');
$i = 0;
$iClass = 0;
$headlines = array(
    'Configuration' => array(),
     
    'Cache' => array(
        'head' => array(
            'class' => 'hide-for-small'
        ),
        'body' => array(
            'class' => 'hide-for-small'
        )
    ),
    'Last write access' => array(
        'head' => array(
            'class' => 'hide-for-small text-right'
        ),
        'body' => array(
            'class' => 'hide-for-small text-right'
        )
    ),
    'Clear' => array(
        'head' => array(
            'class' => 'text-right'
        ),
        'body' => array(
            'class' => 'text-right'
        )
    ),
);
$ihead = count($headlines);
foreach ($headlines as $column => $attributes) {
    $columns[] = $this->translate($column);
    if (is_array($attributes) && ! empty($attributes)) {
        foreach ($attributes as $area => $attribute) {
            switch ($area) {
                case 'head':
                    $tableFactory->setHeadlineAttributtes('class', $attribute['class'], $i);
                    break;
                case 'body':
                    $tableFactory->setTagAttributtes('class', $attribute['class'], $i);
                    break;
                default:
                    break;
            }
        }
    }
    $i ++;
}
$tableFactory->setHeadline($columns);
$i = 0;
foreach ($this->entries as $area => $entry) {
    if ('configuration' == $entry['groupkey']){
        if (isset($entry['metas'])) {
            $props = array(
                'clear' => array(
                    'label' => 'Clear',
                    'href' => '/mcwork/cache/clear/' . $area,
                    'attribs' => array(
                        'title' => 'Empty cache',
                        'class' => 'small button'
                    )
                )
            );
            $clear = $this->mcworkToolbar($props, true, $this->tableeditcontent->toArray(), false );
            $date = date("d.m.Y H:i:s", $entry['metas']['mtime']);
        } else {
            $clear = '';
            $date = '';
        }
        $i ++;
        $rowContent = array();
        $rowContent[] = $entry['label'];
        $rowContent[] = $entry['group'];
        $rowContent[] = $date;
        $rowContent[] = $clear;
        $tableFactory->setHtmlContent($rowContent);
    }
}
$html .= $tableFactory->display();
$html .= '</div></div>';
if (true === $this->xmlHttpRequest){
    print $tableFactory->display();
    exit();
}
$toolbar = '';
if (isset($this->toolbarcontent)) {
    $links = array(
        'clear' => array(
            'href' => '/mcwork/cache/clear/all'
        )
    );
    $toolbar = $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
}
print '<div class="row toprow"><div class="medium-6 columns"><h2>' . $this->content['headline'] . '</h2>';
print '</div><div class="medium-6 columns">'. $this->mcworkToolbar($links, true, $this->toolbarcontent->toArray());
print '</div></div>';
print $this->mcworkAlert($this->messages, $this->msgtype);
print '<div class="row"><div id="addTblContent" class="medium-12 columns">';
print $html;
if (isset($this->content['content']) && strlen($this->content['content']) > 1) {
    echo $this->content['content'];
}
print '</div></div>';
?>